// Generated by CoffeeScript 1.3.3
var argparse, args, parseArgs, parser, print;

print = console.log;

try {
  argparse = require('../lib/argparse');
} catch (error) {
  argparse = require('argparse');
}

parseArgs = function(fun, dummy) {
  var args;
  if (dummy == null) {
    dummy = null;
  }
  try {
    args = parser.parseArgs();
    return fun(args);
  } catch (error) {
    return print(error);
  }
};

print('default values test');

parser = new argparse.ArgumentParser({
  debug: true
});

parser.addArgument(["square"], {
  help: "the base",
  type: "int",
  defaultValue: 0,
  nargs: '?'
});

parser.addArgument(["power"], {
  help: "the exponent",
  type: "int",
  defaultValue: 2,
  nargs: '?'
});

parser.addArgument(["-v", "--verbosity"], {
  help: "increase output verbosity",
  action: "count",
  defaultValue: 0
});

parser.setDefaults({
  help: 'testing',
  zcnt: 0
});

parser.addArgument(["-z"], {
  dest: "zcnt",
  action: "count"
});

print(parser.formatHelp());

parseArgs(function(args) {
  var action, answer;
  print('defaults using parser.getDefault');
  print((function() {
    var _i, _len, _ref, _results;
    _ref = parser._actions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      _results.push("" + action.dest + ": " + (parser.getDefault(action.dest)));
    }
    return _results;
  })());
  print("args");
  print(args);
  if (args.square === void 0) {
    print('DEFAULT error');
  }
  if (args.verbosity === null) {
    print('DEFAULT error');
  }
  answer = Math.pow(args.square, args.power);
  print("verbosity: " + args.verbosity);
  if (args.verbosity >= 2) {
    return print("the " + args.power + " power of " + args.square + " equals " + answer);
  } else if (args.verbosity === 1) {
    return print("" + args.square + "^" + args.power + "=" + answer);
  } else {
    return print(answer);
  }
});

print("-------------------------------------");

print("argumentDefault test");

parser = new argparse.ArgumentParser({
  debug: true,
  argumentDefault: "None"
});

parser.addArgument(['--foo']);

parser.addArgument(['bar'], {
  nargs: '?'
});

args = parser.parseArgs(['--foo', '1', 'BAR']);

print("expect: Namespace(bar='BAR', foo='1')");

print(args);

args = parser.parseArgs([]);

print(args);
